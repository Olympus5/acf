theory tp5
imports Main 
begin

fun exactSubSeq:: "'a list \<Rightarrow> 'a list \<Rightarrow> bool"
where
"exactSubSeq [] _ = True" |
"exactSubSeq _ [] = False" |
"exactSubSeq (x#l1) (y#l2) = (if (x = y) then (exactSubSeq l1 l2)  else (exactSubSeq(x#l1) l2))"

fun subSeq:: "'a list \<Rightarrow> 'a list \<Rightarrow> bool"
where
"subSeq [] _ = True" |
"subSeq (x#[]) [] = True"|
"subSeq _ [] = False" |
"subSeq (x#l1) (y#l2) = (if (x = y) 
                         then (subSeq l1 l2)
                         else if (List.member l2 x)
                         then (subSeq (x#l1) l2)
                         else (exactSubSeq l1 (y#l2)))"

(*lemma subSeq1: "\<exists>x l1 l2. (la=l1@[x]@l2 \<and> lb=l1@l2) \<longrightarrow> (subSeq l1 l)*)
lemma subSeq2: "\<exists>(x::a). (List.member l1 x) \<and> \<not>(List.member l2 x) \<and> (subSeq l1 l2) \<longrightarrow> (exactSubSeq "

code_printing
  code_module "" \<rightharpoonup> (Scala) 

{*// Code generated by Isabelle
package tp5
*}

export_code subSeq in Scala 
  (* file "tp5.scala" *)
end